packages <- c("vegan", "raster", "sp", "rgeos", "rworldmap",
"corrplot", "dismo", "rgdal", "maptools", "kernlab",
"rgbif", "scrubr", "tidyr", "dplyr", "spThin",
"corrplot", "sdmvspecies", "mmap")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages], dependencies = TRUE)
}
library(sdm)
install.packages("sdm", dependencies = TRUE)
sapply(packages, require, character.only = TRUE)
library(sdm)
installAll()
spp <- c("Quercus virginiana", "Quercus minima", "Quercus alba", "Quercus fusiformis")
installAll()
install.packages("Rcpp")
install.packages("Rcpp")
packages <- c("raster", "sp", "rgeos", "rworldmap",
"corrplot", "dismo", "rgdal", "maptools", "kernlab",
"rgbif", "scrubr", "spThin",
"corrplot", "sdmvspecies", "mmap")
sdm::installAll()
sapply(packages, require, character.only = TRUE)
library(sdm)
spp <- c("Quercus virginiana", "Quercus minima", "Quercus alba", "Quercus fusiformis")
gbif_data <- occ_data(scientificName = spp[1], hasCoordinate = TRUE, limit = 2000)
# check how the data are organized:
names(gbif_data)
gbif_data <- occ_data(scientificName = spp, hasCoordinate = TRUE, limit = 2000)
# check how the data are organized:
names(gbif_data)
# get the columns that matter for mapping and cleaning the occurrence data:
occ_quealb <- gbif_data[[3]]$data[, c("decimalLongitude", "decimalLatitude",
"scientificName", "occurrenceStatus",
"coordinateUncertaintyInMeters",
"institutionCode", "references")]
head(occ_quealb)
View(occ_quealb)
occ_quealb <- subset(occ_quealb, !is.na(decimalLongitude) & !is.na(decimalLatitude))
occ_quealb <- coord_incomplete(coord_imprecise(coord_impossible(coord_unlikely(occ_quealb))))
packages <- c("raster", "sp", "rgeos", "rworldmap",
"corrplot", "dismo", "rgdal", "maptools", "kernlab",
"rgbif", "scrubr", "spThin",
"corrplot", "sdmvspecies", "mmap")
sapply(packages, require, character.only = TRUE)
install.packages("scrubr")
devtools::install_github("ropensci/scrubr")
library(scrubr)
occ_quealb <- subset(occ_quealb, !is.na(decimalLongitude) & !is.na(decimalLatitude))
occ_quealb <- coord_incomplete(coord_imprecise(coord_impossible(coord_unlikely(occ_quealb))))
dim(occ_quealb)
View(occ_quealb)
quealb_spt <- SpatialPointsDataFrame(coords = occ_quealb[, 1:2],
data = data.frame(occ_quealb),
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
plot(quealb_spt, col = "darkgreen", pch = 16)
plot(countriesCoarse, add = TRUE, lwd = 2)
thinning <- thin(
loc.data =  occ_quealb,
verbose = FALSE,
long.col = "decimalLongitude",
lat.col = "decimalLatitude",
spec.col = "scientificName",
thin.par = 5, # points have at least a minimum distance of 5 km from each other
reps = 10,
locs.thinned.list.return = TRUE,
write.files = FALSE,
out.dir = "Downloads/")
thinning
as.data.frame(sample(thinning, 1))
thinning <- as.data.frame(sample(thinning, 1))
thinning$Species <- "Quercus_alba"
dim(thinning)
head(thinning)
thinned_spt <- SpatialPointsDataFrame(coords = thinning[, 1:2],
data = thinning,
proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
plot(quealb_spt, col = "red", pch = 15)
plot(thinned_spt, col = "darkgreen", pch = 16, add = TRUE)
plot(countriesCoarse, add = TRUE, lwd = 2)
bios <- raster::getData("worldclim", var = "bio", res = 10,
download = TRUE, path = "Downloads/")
names(bios)
str(bios[[1]])
plot(stack(bios$bio1, bios$bio12))
NAs <- subset(countriesCoarse, continent == "North America") # used as extent
bios_NA <- crop(bios, NAs)
plot(bios_NA[[1]]) # mean annual temperature
plot(thinned_spt, col = "red", pch = 16, add = TRUE) # add occurrence records
plot(countriesCoarse, lwd = 2, lty = 2, add = TRUE) # add country borders
plot(bios_NA[[12]]) # mean annual temperature
plot(thinned_spt, col = "red", pch = 16, add = TRUE) # add occurrence records
plot(countriesCoarse, lwd = 2, lty = 2, add = TRUE) # add country borders
### Species specific accessible area
bb <- bbox(thinned_spt) # bounding box
e <- extent(c(bb[1]-3, bb[3]+3, bb[2]-3, bb[4]+3)) # bounding box + 300 km
p <- as(e, 'SpatialPolygons') # transform to polygon
crs(p) <- crs(bios_NA) # use the geographical reference of the bioclimatic variables
crs(NAs) <- crs(bios_NA)
out <- gIntersection(NAs, p, byid = FALSE) # use NAs to eliminate areas on the sea
plot(bios_NA[[1]])
plot(p, add = TRUE, lty = 2)
plot(out, add = TRUE, lwd = 2)
bios_spp <- raster::crop(bios_NA, out)
bios_spp <- raster::mask(bios_spp, out)
plot(bios_spp[[1]])
plot(thinned_spt, add = TRUE, col = "red", pch = 16)
plot(NAs, add = TRUE, lty = 2)
set.seed(12345) # Random Number Generation to obtain the same result
# Generate the data
absence <- randomPoints(mask = bios_spp[[1]],
n = round(nrow(thinned_spt)*2, 0), # number of pseudoabsences
p = thinned_spt, ext = extent(bios_spp))
presence <- data.frame(coordinates(thinned_spt)) # presence data
absence <- data.frame(absence) # pseudoabsence data
names(absence) <- names(presence)
presence$Occurrence <- 1 # presence data
absence$Occurrence <- 0 # pseudoabsence data
quealb <- rbind(presence, absence) # combine both information
quealb$Species <- "Quercus_alba"
coordinates(quealb) <- ~ Longitude + Latitude
crs(quealb) <- crs(bios_spp)
quealb
plot(bios_spp[[1]])
plot(quealb[quealb$Occurrence == 1, ], col = "blue", add = TRUE, pch = 16)
points(quealb[quealb$Occurrence == 0, ], col = "red", pch = 16)
round(nrow(thinned_spt)*2, 0)
quealb_bios <- data.frame(raster::extract(bios_spp, quealb))
quealb_bios <- cbind(data.frame(quealb), quealb_bios)
quealb_bios <- quealb_bios[complete.cases(quealb_bios), ]
quealb_bios <- na.omit(quealb_bios)
head(quealb_bios)
# We first estimate a correlation matrix from the predictors. We use Spearman rank correlation coefficient, as we do not know whether all variables are normally distributed.
cor_mat <- cor(quealb_bios[, c(6:24)], method = 'spearman')
corrplot.mixed(cor_mat, tl.pos = "lt", tl.cex = 0.5, number.cex = 0.5,
addCoefasPercent = TRUE, mar = c(0, 0, 1, 0))
# Install the package from source
remotes::install_git("https://gitup.uni-potsdam.de/macroecology/mecofun.git")
library(mecofun)
quealb_bios[, -c(1:5)]
covar_sel <- select07(X = quealb_bios[, -c(1:5)], # only predictors data
y = quealb_bios$Occurrence, # presence-absence data
threshold = 0.7) # here you can change the threshold for one
# Check out the structure of the resulting object:
str(covar_sel)
covar_sel$AIC
covar_sel$cor_mat
covar_sel$pred_sel
preds <- covar_sel$pred_sel
preds
bios_quealb_sel <- stack(bios_spp$bio2, bios_spp$bio7, bios_spp$bio8,
bios_spp$bio10, bios_spp$bio12, bios_spp$bio15)
plot(bios_quealb_sel)
quealbDATA <- sdmData(formula = Occurrence ~ bio2 + bio7 + bio8 + bio10 + bio12 + bio15,
train = quealb, # presence-pseudoabsence data
predictors = bios_quealb_sel, # selected covariables
crs = crs(bios_quealb_sel))
getmethodNames('sdm')
quealbSDM <- sdm(Occurrence~., data = quealbDATA, # formula and data
methods = c("bioclim", "domain.dismo", "glm", "gam", "rf", "svm"), # algorithms
replication = "sub", test.percent = 30, n = 2, # training-testing subsampling
parallelSettings = list(ncore = 8, method = "parallel")) # parallel computation
quealbSDM
quealb_ENM_bioclim
quealb_ENM_bioclim <- predict(quealbSDM, newdata = bios_quealb_sel,
method = "bioclim", mean = TRUE)
quealb_ENM_bioclim
quealb_ENM_bioclim <- sdmvspecies::rescale(quealb_ENM_bioclim$sp_1.m_bioclim.re_subs)
plot(quealb_ENM_bioclim)
### Ensemble prediction - ensemble based on TSS statistics
quealb_ENM_ensemble <- ensemble(quealbSDM, newdata = bios_quealb_sel,
method = c("rf", "gam", "svm"),
setting = list(method = "weighted", stat = "TSS"),
parallelSettings = list(ncore = 8, method = "parallel"))
quealb_ENM_ensemble <- sdmvspecies::rescale(quealb_ENM_ensemble)
plot(quealb_ENM_ensemble)
dt <- data.frame(as.data.frame(quealbDATA), coordinates(quealbDATA))
head(dt)
prediction <- raster::extract(quealb_ENM_ensemble, dt[, c("Longitude", "Latitude")])
evaluation <- sdm::evaluates(dt$Occurrence, prediction) # observed versus expected
threshold_sel <- evaluation@threshold_based$threshold[2]
round(threshold_sel, 2)
quealb_SDM_ensemble <- quealb_ENM_ensemble
quealb_SDM_ensemble[] <- ifelse(quealb_SDM_ensemble[] >= threshold_sel, 1, 0)
plot(quealb_SDM_ensemble)
plot(countriesCoarse, add = TRUE)
install.packages("mcp")
setwd("Documents/GitHub/FITBITs/")
library(mcp)
library(tidybayes)
library(tidyverse)
##### Load and prepare data #####
load("output/Vertebrates/tree_cuts_VerTer_01_My.RData")
clades <- c("amphibians", "squamata",
"birds", "mammals")
treeChops_log <- list()
for(i in 1:length(clades)) {
treeChops_log[[i]] <- treeChops[[i]] %>%
filter(My <= 30) %>%
mutate(SR_log = log(SR), PD_log = log(PD))
}
##### Inits #####
iter = 25000
chains = 4
## Model SR
mod_SR <- list(
SR ~ 1 + My,  # intercept + slope
1 ~ 0 + My,  # joined slope
1 ~ 0,  # joined plateau
1 ~ 1  # disjoined plateau
)
mod_SR_log <- list(
SR_log ~ 1 + My,  # intercept + slope
1 ~ 0 + My,  # joined slope
1 ~ 0,  # joined plateau
1 ~ 1  # disjoined plateau
)
# Null model
mod_SR_null <- list(SR ~ 1)
mod_PD <- list(
PD ~ 1 + My,  # intercept + slope
1 ~ 0 + My,  # joined slope
1 ~ 0,  # joined plateau
1 ~ 1  # disjoined plateau
)
mod_PD_log <- list(
PD_log ~ 1 + My,  # intercept + slope
1 ~ 0 + My,  # joined slope
1 ~ 0,  # joined plateau
1 ~ 1  # disjoined plateau
)
# Null model
mod_PD_null <- list(PD ~ 1)
##### Run Bayesian Regressions with Change Points #####
## SR models
models_SR <- list()
models_SR_null <- list()
## PD models
models_PD <- list()
models_PD_null <- list()
### LOGS
## SR models
models_SR_LOG <- list()
## PD models
models_PD_LOG <- list()
## Plots
pps_SR <- list()
pps_PD <- list()
pps_SR_LOG <- list()
pps_PD_LOG <- list()
j=3
print(paste0("Starting Bayesian Regressions with CP for ", clades[j], " clade"))
### Models
fit_sr <- mcp(data = treeChops_log[[j]],
model = mod_SR,
chains = chains,
iter = iter)
pps_SR[[j]] <- plot(fit_sr)
fit_sr$loo <- loo(fit_sr)
models_SR[[j]] <- fit_sr
fit_pd <- mcp(data = treeChops_log[[j]],
model = mod_PD,
chains = chains,
iter = iter)
pps_PD[[j]] <- plot(fit_pd)
fit_pd$loo <- loo(fit_pd)
models_PD[[j]] <- fit_pd
pps_SR
pps_PD
fit_pd$loo
models_PD
fit_sr
fit_pd
fit_pd$data
fit_pd$model
fit_pd$mcmc_post
summary(fit_pd)
### Null models
fit_sr_null <- mcp(mod_SR_null,
data = treeChops_log[[j]],
par_x = "My")  # null model here
fit_sr_null$loo <- loo(fit_sr_null)
models_SR_null[[j]] <- fit_sr_null
fit_pd_null <- mcp(mod_PD_null,
data = treeChops_log[[j]],
par_x = "My")  # fit null model here
fit_pd_null$loo <- loo(fit_pd_null)
models_PD_null[[j]] <- fit_pd_null
##### Load and prepare data #####
load("output/Vertebrates/tree_cuts_VerTer_01_My.RData")
clade <- "birds"
treeChops_log <- treeChops[[3]] %>%
filter(My <= 30) %>%
mutate(SR_log = log(SR), PD_log = log(PD))
treeChops_log
treeChops_Birds_log <- treeChops[[3]] %>%
filter(My <= 30) %>%
mutate(SR_log = log(SR), PD_log = log(PD))
treeChops_Birds_log
##### Inits #####
iter = 25000
chains = 4
mod_PD <- list(
PD ~ 1 + My,  # intercept + slope
1 ~ 0 + My,  # joined slope
1 ~ 0,  # joined plateau
1 ~ 1  # disjoined plateau
)
# Null model
mod_PD_null <- list(PD ~ 1)
##### Run Bayesian Regressions with Change Points #####
## Run model
fit_pd <- mcp(data = treeChops_Birds_log,
model = mod_PD,
chains = chains,
iter = iter)
dev.off()
pps_PD <- plot(fit_pd)
pps_PD
fit_pd$loo <- loo(fit_pd)
## Run null model
fit_pd_null <- mcp(mod_PD_null,
data = treeChops_Birds_log,
par_x = "My")  # fit null model here
fit_pd_null$loo <- loo(fit_pd_null)
##### Model comparison #####
print(loo::loo_compare(fit_pd_null$loo, fit_pd$loo))
fit_pd
summary(fit_pd)[1, ]
summary(fit_pd[[1]])
summary(fit_pd[[2]])
summary(fit_pd[[3]])
summary(fit_pd[[4]])
summary(fit_pd[[5]])
summary(fit_pd[[6]])
summary(fit_pd[[7]])
summary(fit_pd)[1, ]
## PD
cps1_PD <- summary(fit_pd)[1, ]
cps2_PD <- summary(fit_pd)[2, ]
cps3_PD <- summary(fit_pd)[3, ]
cps1_PD
cps2_PD
cps3_PD
### Save models
# PD
save(fit_pd, fit_pd_null, pps_PD,
file = "output/RCP/My01/BRCP_PD_Birds.RData")
### Save models
# PD
save(fit_pd, fit_pd_null, pps_PD,
file = "output/RCP/BRCP_PD_Birds.RData")
### Check trend
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = 5, color = "darkgray", linetype = "dashed", size = 1)
cps1_PD
cps1_PD[2]
cps1_PD[3]
cps1_PD[4]
dev.off()
### Plot Birds over 30 MY
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = cps1_PD[2], color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = cps1_PD[3], color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = cps1_PD[4], color = "darkgray", linetype = "dashed", size = 1)
### Plot Birds over 30 MY
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = cps1_PD[2], color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = cps1_PD[3], color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = cps1_PD[4], color = "darkgray", linetype = "dashed", size = 1)
dev.off()
cps1_PD[3]
cps1_PD[2]
cps1_PD[4]
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = cps1_PD[2], color = "darkgray", linetype = "dashed", size = 1)
dev.off()
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
)
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = as.numeric(cps1_PD[2]), color = "darkgray", linetype = "dashed", size = 1)
### Plot Birds over 30 MY
pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = as.numeric(cps1_PD[2]), color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = as.numeric(cps1_PD[3]), color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = as.numeric(cps1_PD[4]), color = "darkgray", linetype = "dashed", size = 1)
### Plot Birds over 30 MY
pBirds <- pps_PD + labs(x = "Time (My)", y = "Total PD loss  - Birds") +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"),
legend.position = "none",
axis.line = element_line(colour = "black"),
axis.text = element_text(size = 15),
axis.title = element_text(size = 15),
axis.line.x = element_line(size = 1),
axis.line.y = element_line(size = 1),
plot.title = element_text(size = 20)
) +
geom_vline(xintercept = as.numeric(cps1_PD[2]), color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = as.numeric(cps1_PD[3]), color = "darkgray", linetype = "dashed", size = 1) +
geom_vline(xintercept = as.numeric(cps1_PD[4]), color = "darkgray", linetype = "dashed", size = 1)
pBirds
pdf(file = "output/RCP/BRCP_birds.pdf",
height = 8, width = 10)
pBirds
dev.off()
pdf(file = "output/RCP/BRCP_birds.pdf",
height = 7, width = 10)
pBirds
dev.off()
